# structure of docs

## what is remake and what is it's main benefit?

building web applications shouldn't be hard

## high level explanation

1. all the page of your app are backed by a giant JSON object
2. each page of your app knows how to export itself as a JSON object
3. details like user accounts and CRUD operations are taken care of automatically

result: you can build a fully-functional, amazing web app in a few hours

the key that unlocks Remake's power is the ability to attach data directly to DOM elements in a nested structure that's easily extracted as JSON. this allows Remake to use the DOM as a source of truth: whatever is displayed on the page is the data in the database -- and whatever is added, removed, or edited on the current page is also added, removed, and edited in the database.

## diagram of how it works

data -> templates + partials -> view -> CRUD -> view -> data

- each user has a JSON file to store all their app data in
- this data JSON file's data is used to render every page and partial template
- when a page author is viewing a page, they can perform CRUD operations
- these CRUD operations modify the view, which is, in turn, used as the source of truth
- the data from the view is exported and synced with the JSON file

because Remake relies on the data in the DOM as a source of truth, when CRUD operations are made to the view, we don't have to re-render the view from the data in the database. we simply trust that our changes are accurate and synced to the back-end. this allows Remake apps to behave like dynamic, client rendered apps even though they're server rendered.

## directory structure

_remake <- where the framework code lives
project-files <- where your app code lives
package.json <- where your app's dependencies live











